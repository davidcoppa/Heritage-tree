// <auto-generated />
using System;
using EventsManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Events.Core.Migrations
{
    [DbContext(typeof(EventsContext))]
    [Migration("20220423045946_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Events.Core.Model.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lgn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("EventsManager.Model.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("LoccationId")
                        .HasColumnType("int");

                    b.Property<int>("Person1ID")
                        .HasColumnType("int");

                    b.Property<int?>("Person2ID")
                        .HasColumnType("int");

                    b.Property<int?>("Person3ID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("LoccationId");

                    b.HasIndex("Person1ID");

                    b.HasIndex("Person2ID");

                    b.HasIndex("Person3ID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("EventsManager.Model.EventTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventType");
                });

            modelBuilder.Entity("EventsManager.Model.ParentPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonFatherID")
                        .HasColumnType("int");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int?>("PersonMotherID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonFatherID");

                    b.HasIndex("PersonID");

                    b.HasIndex("PersonMotherID");

                    b.ToTable("ParentPerson");
                });

            modelBuilder.Entity("EventsManager.Model.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfDeath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("EventsManager.Model.Photos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventID")
                        .HasColumnType("int");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventID");

                    b.HasIndex("PersonID");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("EventsManager.Model.Event", b =>
                {
                    b.HasOne("EventsManager.Model.EventTypes", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Core.Model.Location", "Loccation")
                        .WithMany()
                        .HasForeignKey("LoccationId");

                    b.HasOne("EventsManager.Model.Person", "Person1")
                        .WithMany()
                        .HasForeignKey("Person1ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsManager.Model.Person", "Person2")
                        .WithMany()
                        .HasForeignKey("Person2ID");

                    b.HasOne("EventsManager.Model.Person", "Person3")
                        .WithMany()
                        .HasForeignKey("Person3ID");

                    b.Navigation("EventType");

                    b.Navigation("Loccation");

                    b.Navigation("Person1");

                    b.Navigation("Person2");

                    b.Navigation("Person3");
                });

            modelBuilder.Entity("EventsManager.Model.ParentPerson", b =>
                {
                    b.HasOne("EventsManager.Model.Person", "PersonFather")
                        .WithMany()
                        .HasForeignKey("PersonFatherID");

                    b.HasOne("EventsManager.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsManager.Model.Person", "PersonMother")
                        .WithMany()
                        .HasForeignKey("PersonMotherID");

                    b.Navigation("Person");

                    b.Navigation("PersonFather");

                    b.Navigation("PersonMother");
                });

            modelBuilder.Entity("EventsManager.Model.Photos", b =>
                {
                    b.HasOne("EventsManager.Model.Event", null)
                        .WithMany("photos")
                        .HasForeignKey("EventID");

                    b.HasOne("EventsManager.Model.Person", null)
                        .WithMany("Photos")
                        .HasForeignKey("PersonID");
                });

            modelBuilder.Entity("EventsManager.Model.Event", b =>
                {
                    b.Navigation("photos");
                });

            modelBuilder.Entity("EventsManager.Model.Person", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
