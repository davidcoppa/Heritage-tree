import { ChangeDetectionStrategy, Component, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { NgxGalleryAnimation } from '../ngx-gallery-animation';
import { animate, state, style, transition, trigger } from '@angular/animations';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "../ngx-gallery.service";
import * as i3 from "../ngx-gallery-action/ngx-gallery-action.component";
import * as i4 from "../ngx-gallery-bullets/ngx-gallery-bullets.component";
import * as i5 from "../ngx-gallery-arrows/ngx-gallery-arrows.component";
import * as i6 from "@angular/common";
export class NgxGalleryImageComponent {
    constructor(sanitization, changeDetectorRef, elementRef, helperService) {
        this.sanitization = sanitization;
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.helperService = helperService;
        this.imageClick = new EventEmitter();
        this.activeChange = new EventEmitter();
        this.animating = new EventEmitter();
        this.canChangeImage = true;
        this.isAnimating = false;
        this.changeDetectorRef = changeDetectorRef;
        this.action = 'none';
    }
    set selectedIndex(index) {
        if (index > this._selectedIndex) {
            let action;
            if (this.animation === NgxGalleryAnimation.Slide) {
                action = 'slideRight';
            }
            else if (this.animation === NgxGalleryAnimation.Fade) {
                action = 'fade';
            }
            else if (this.animation === NgxGalleryAnimation.Rotate) {
                action = 'rotateRight';
            }
            else if (this.animation === NgxGalleryAnimation.Zoom) {
                action = 'zoom';
            }
            this.setAction(action);
        }
        else if (index < this._selectedIndex) {
            let action;
            if (this.animation === NgxGalleryAnimation.Slide) {
                action = 'slideLeft';
            }
            else if (this.animation === NgxGalleryAnimation.Fade) {
                action = 'fade';
            }
            else if (this.animation === NgxGalleryAnimation.Rotate) {
                action = 'rotateLeft';
            }
            else if (this.animation === NgxGalleryAnimation.Zoom) {
                action = 'zoom';
            }
            this.setAction(action);
        }
        this._selectedIndex = index;
    }
    // @HostBinding('style.display') public display = 'inline-block';
    // @HostBinding('style.background-color') public color = 'lime';
    ngOnInit() {
        if (this.arrows && this.arrowsAutoHide) {
            this.arrows = false;
        }
        if (this.autoPlay) {
            this.startAutoPlay();
        }
    }
    ngOnChanges(changes) {
        if (changes['swipe']) {
            this.helperService.manageSwipe(this.swipe, this.elementRef, 'image', () => this.showNext(), () => this.showPrev());
        }
    }
    onMouseEnter() {
        if (this.arrowsAutoHide && !this.arrows) {
            this.arrows = true;
        }
        if (this.autoPlay && this.autoPlayPauseOnHover) {
            this.stopAutoPlay();
        }
    }
    onMouseLeave() {
        if (this.arrowsAutoHide && this.arrows) {
            this.arrows = false;
        }
        if (this.autoPlay && this.autoPlayPauseOnHover) {
            this.startAutoPlay();
        }
    }
    reset(index) {
        this._selectedIndex = index;
        this.action = 'none';
    }
    getImages() {
        if (!this.images) {
            return [];
        }
        if (this.lazyLoading) {
            const indexes = [this._selectedIndex];
            const prevIndex = this._selectedIndex - 1;
            if (prevIndex === -1 && this.infinityMove) {
                indexes.push(this.images.length - 1);
            }
            else if (prevIndex >= 0) {
                indexes.push(prevIndex);
            }
            const nextIndex = this._selectedIndex + 1;
            if (nextIndex === this.images.length && this.infinityMove) {
                indexes.push(0);
            }
            else if (nextIndex < this.images.length) {
                indexes.push(nextIndex);
            }
            return this.images.filter((img, i) => indexes.indexOf(i) !== -1);
        }
        else {
            return this.images;
        }
    }
    startAutoPlay() {
        this.stopAutoPlay();
        this.timer = setInterval(() => {
            if (!this.showNext()) {
                this._selectedIndex = -1;
                this.showNext();
            }
        }, this.autoPlayInterval);
    }
    stopAutoPlay() {
        if (this.timer) {
            clearInterval(this.timer);
        }
    }
    handleClick(event, index) {
        if (this.clickable) {
            this.imageClick.emit(index);
            event.stopPropagation();
            event.preventDefault();
        }
    }
    show(index) {
        if (this.isAnimating) {
            return;
        }
        if (index > this._selectedIndex) {
            let action;
            if (this.animation === NgxGalleryAnimation.Slide) {
                action = 'slideRight';
            }
            else if (this.animation === NgxGalleryAnimation.Fade) {
                action = 'fade';
            }
            else if (this.animation === NgxGalleryAnimation.Rotate) {
                action = 'rotateRight';
            }
            else if (this.animation === NgxGalleryAnimation.Zoom) {
                action = 'zoom';
            }
            this.setAction(action);
        }
        else {
            let action;
            if (this.animation === NgxGalleryAnimation.Slide) {
                action = 'slideLeft';
            }
            else if (this.animation === NgxGalleryAnimation.Fade) {
                action = 'fade';
            }
            else if (this.animation === NgxGalleryAnimation.Rotate) {
                action = 'rotateLeft';
            }
            else if (this.animation === NgxGalleryAnimation.Zoom) {
                action = 'zoom';
            }
            this.setAction(action);
        }
        this._selectedIndex = index;
        this.activeChange.emit(this._selectedIndex);
        this.setChangeTimeout();
    }
    setAction(action) {
        this.action = action;
        this.changeDetectorRef.detectChanges();
    }
    showNext() {
        if (this.isAnimating) {
            return false;
        }
        if (this.canShowNext() && this.canChangeImage) {
            let action;
            if (this.animation === NgxGalleryAnimation.Slide) {
                action = 'slideRight';
            }
            else if (this.animation === NgxGalleryAnimation.Fade) {
                action = 'fade';
            }
            else if (this.animation === NgxGalleryAnimation.Rotate) {
                action = 'rotateRight';
            }
            else if (this.animation === NgxGalleryAnimation.Zoom) {
                action = 'zoom';
            }
            this.setAction(action);
            this._selectedIndex++;
            if (this._selectedIndex === this.images.length) {
                this._selectedIndex = 0;
            }
            this.activeChange.emit(this._selectedIndex);
            this.setChangeTimeout();
            return true;
        }
        else {
            return false;
        }
    }
    showPrev() {
        if (this.isAnimating) {
            return;
        }
        if (this.canShowPrev() && this.canChangeImage) {
            let action;
            if (this.animation === NgxGalleryAnimation.Slide) {
                action = 'slideLeft';
            }
            else if (this.animation === NgxGalleryAnimation.Fade) {
                action = 'fade';
            }
            else if (this.animation === NgxGalleryAnimation.Rotate) {
                action = 'rotateLeft';
            }
            else if (this.animation === NgxGalleryAnimation.Zoom) {
                action = 'zoom';
            }
            this.setAction(action);
            this._selectedIndex--;
            if (this._selectedIndex < 0) {
                this._selectedIndex = this.images.length - 1;
            }
            this.activeChange.emit(this._selectedIndex);
            this.setChangeTimeout();
        }
    }
    setChangeTimeout() {
        this.canChangeImage = false;
        let timeout = 1000;
        if (this.animation === NgxGalleryAnimation.Slide
            || this.animation === NgxGalleryAnimation.Fade) {
            timeout = 500;
        }
        setTimeout(() => {
            this.canChangeImage = true;
        }, timeout);
    }
    canShowNext() {
        if (this.images) {
            return this.infinityMove || this._selectedIndex < this.images.length - 1;
        }
        else {
            return false;
        }
    }
    canShowPrev() {
        if (this.images) {
            return this.infinityMove || this._selectedIndex > 0;
        }
        else {
            return false;
        }
    }
    getSafeUrl(image) {
        return this.sanitization.bypassSecurityTrustStyle(this.helperService.getBackgroundUrl(image.toString()));
    }
    getFileType(fileSource) {
        return this.helperService.getFileType(fileSource);
    }
    onStart(event) {
        this.isAnimating = true;
        this.animating.emit(true);
    }
    onDone(event) {
        this.isAnimating = false;
        this.animating.emit(false);
    }
}
NgxGalleryImageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxGalleryImageComponent, deps: [{ token: i1.DomSanitizer }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i2.NgxGalleryService }], target: i0.ɵɵFactoryTarget.Component });
NgxGalleryImageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: NgxGalleryImageComponent, selector: "ngx-gallery-image", inputs: { images: "images", clickable: "clickable", selectedIndex: "selectedIndex", arrows: "arrows", arrowsAutoHide: "arrowsAutoHide", swipe: "swipe", animation: "animation", size: "size", arrowPrevIcon: "arrowPrevIcon", arrowNextIcon: "arrowNextIcon", autoPlay: "autoPlay", autoPlayInterval: "autoPlayInterval", autoPlayPauseOnHover: "autoPlayPauseOnHover", infinityMove: "infinityMove", lazyLoading: "lazyLoading", actions: "actions", descriptions: "descriptions", showDescription: "showDescription", bullets: "bullets" }, outputs: { imageClick: "imageClick", activeChange: "activeChange", animating: "animating" }, host: { listeners: { "mouseenter": "onMouseEnter()", "mouseleave": "onMouseLeave()" } }, usesOnChanges: true, ngImport: i0, template: "<div class=\"ngx-gallery-image-wrapper ngx-gallery-animation-{{animation}} ngx-gallery-image-size-{{size}}\">\n  <ng-container *ngFor=\"let image of getImages(); let i = index;\">\n\n    <div *ngIf=\"image.type === 'image' && image.index === _selectedIndex\" class=\"ngx-gallery-image\"\n         [ngClass]=\"{'ngx-gallery-clickable': clickable }\"\n         [style.background-image]=\"getSafeUrl(image.src)\"\n         (click)=\"handleClick($event, image.index)\"\n         [@animation]=\"action\"\n         (@animation.start)=\"onStart($event)\"\n         (@animation.done)=\"onDone($event)\">\n      <div class=\"ngx-gallery-icons-wrapper\">\n        <ngx-gallery-action *ngFor=\"let action of actions\" [icon]=\"action.icon\" [disabled]=\"action.disabled\"\n                            [titleText]=\"action.titleText\"\n                            (closeClick)=\"action.onClick($event, image.index)\"></ngx-gallery-action>\n      </div>\n      <div class=\"ngx-gallery-image-text\" *ngIf=\"showDescription && descriptions[image.index]\"\n          [innerHTML]=\"descriptions[image.index]\" (click)=\"$event.stopPropagation()\"></div>\n    </div>\n\n    <div *ngIf=\"image.type === 'video' && image.index === _selectedIndex\" class=\"ngx-gallery-image\"\n         [ngClass]=\"{'ngx-gallery-clickable': clickable }\"\n         [style.background-image]=\"getSafeUrl(image.src)\"\n         (click)=\"handleClick($event, image.index)\"\n         [@animation]=\"action\"\n         (@animation.start)=\"onStart($event)\"\n         (@animation.done)=\"onDone($event)\">\n      <video controls style=\"width:100%; height:100%; background: #000;\">\n        <source [src]=\"image.src\">\n          Your browser does not support the video tag.\n      </video>\n      <div class=\"ngx-gallery-icons-wrapper\">\n      <ngx-gallery-action *ngFor=\"let action of actions\" [icon]=\"action.icon\" [disabled]=\"action.disabled\"\n                          [titleText]=\"action.titleText\"\n                          (closeClick)=\"action.onClick($event, image.index)\"></ngx-gallery-action>\n      </div>\n      <div class=\"ngx-gallery-image-text\" *ngIf=\"showDescription && descriptions[image.index]\"\n          [innerHTML]=\"descriptions[image.index]\" (click)=\"$event.stopPropagation()\"></div>\n      </div>\n\n\n  </ng-container>\n  <ngx-gallery-bullets *ngIf=\"bullets\" [count]=\"images.length\" [active]=\"_selectedIndex\"\n                       (bulletChange)=\"show($event)\"></ngx-gallery-bullets>\n  <ngx-gallery-arrows class=\"ngx-gallery-image-size-{{size}}\" *ngIf=\"arrows\" (prevClick)=\"showPrev()\"\n                      (nextClick)=\"showNext()\" [prevDisabled]=\"!canShowPrev()\" [nextDisabled]=\"!canShowNext()\"\n                      [arrowPrevIcon]=\"arrowPrevIcon\" [arrowNextIcon]=\"arrowNextIcon\"></ngx-gallery-arrows>\n</div>\n", styles: [":host{width:100%;display:inline-block;position:relative;font-size:25px}.ngx-gallery-image-wrapper{width:100%;height:100%;position:absolute;left:0;top:0;overflow:hidden}.ngx-gallery-image{background-position:center;background-repeat:no-repeat;height:100%;width:100%;position:absolute;top:0}.ngx-gallery-image-size-cover .ngx-gallery-image{background-size:cover}.ngx-gallery-image-size-contain .ngx-gallery-image{background-size:contain}.ngx-gallery-animation-fade .ngx-gallery-image{left:0;opacity:1;transition:.5s ease-in-out}.ngx-gallery-animation-fade .ngx-gallery-image.ngx-gallery-active{opacity:1}.ngx-gallery-animation-rotate .ngx-gallery-image{transition:1s ease;transform:scale(1) rotate(0);left:0;opacity:1}.ngx-gallery-animation-zoom .ngx-gallery-image{transition:1s ease;transform:scale(1);left:0;opacity:1}.ngx-gallery-image-text{width:100%;background:rgba(0,0,0,.7);padding:10px;text-align:center;color:#fff;font-size:16px;position:absolute;bottom:0;z-index:10}\n"], components: [{ type: i3.NgxGalleryActionComponent, selector: "ngx-gallery-action", inputs: ["icon", "disabled", "titleText"], outputs: ["closeClick"] }, { type: i4.NgxGalleryBulletsComponent, selector: "ngx-gallery-bullets", inputs: ["count", "active"], outputs: ["bulletChange"] }, { type: i5.NgxGalleryArrowsComponent, selector: "ngx-gallery-arrows", inputs: ["prevDisabled", "nextDisabled", "arrowPrevIcon", "arrowNextIcon"], outputs: ["prevClick", "nextClick"] }], directives: [{ type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], animations: [
        trigger('animation', [
            // ...
            state('slideRight', style({})),
            state('slideLeft', style({})),
            state('fade', style({})),
            state('rotateLeft', style({})),
            state('rotateRight', style({})),
            state('zoom', style({})),
            transition('slideRight => void', [
                animate('500ms ease-in-out', style({ transform: 'translateX(-100%)' }))
            ]),
            transition('void => slideRight', [
                style({ transform: 'translateX(100%)' }),
                animate('500ms ease-in-out', style({ transform: 'translateX(0)' }))
            ]),
            transition('slideLeft => void', [
                animate('500ms ease-in-out', style({ transform: 'translateX(100%)' }))
            ]),
            transition('void => slideLeft', [
                style({ transform: 'translateX(-100%)' }),
                animate('500ms ease-in-out', style({ transform: 'translateX(0)' }))
            ]),
            transition('fade => void', [
                animate('500ms ease-in-out', style({ opacity: '0' }))
            ]),
            transition('void => fade', [
                style({ opacity: '0' }),
                animate('500ms ease-in-out', style({ opacity: '1' }))
            ]),
            transition('rotateLeft => void', [
                animate('500ms ease-in-out', style({ transform: 'scale(1, 1) rotate(-90deg)', opacity: '0' }))
            ]),
            transition('void => rotateLeft', [
                style({ transform: 'scale(1, 1) rotate(-90deg)', opacity: '0' }),
                animate('500ms ease-in-out', style({ transform: 'scale(1, 1) rotate(0deg)', opacity: '1' }))
            ]),
            transition('rotateRight => void', [
                animate('500ms ease-in-out', style({ transform: 'scale(1, 1) rotate(90deg)', opacity: '0' }))
            ]),
            transition('void => rotateRight', [
                style({ transform: 'scale(1, 1) rotate(90deg)', opacity: '0' }),
                animate('500ms ease-in-out', style({ transform: 'scale(1, 1) rotate(0deg)', opacity: '1' }))
            ]),
            transition('zoom => void', [
                animate('500ms ease-in-out', style({ transform: 'scale(2.5,2.5)', opacity: '0' }))
            ]),
            transition('void => zoom', [
                style({ transform: 'scale(2.5,2.5)', opacity: '0' }),
                animate('500ms ease-in-out', style({ transform: 'scale(1, 1)', opacity: '1' }))
            ]),
        ]),
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: NgxGalleryImageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-gallery-image', changeDetection: ChangeDetectionStrategy.OnPush, animations: [
                        trigger('animation', [
                            // ...
                            state('slideRight', style({})),
                            state('slideLeft', style({})),
                            state('fade', style({})),
                            state('rotateLeft', style({})),
                            state('rotateRight', style({})),
                            state('zoom', style({})),
                            transition('slideRight => void', [
                                animate('500ms ease-in-out', style({ transform: 'translateX(-100%)' }))
                            ]),
                            transition('void => slideRight', [
                                style({ transform: 'translateX(100%)' }),
                                animate('500ms ease-in-out', style({ transform: 'translateX(0)' }))
                            ]),
                            transition('slideLeft => void', [
                                animate('500ms ease-in-out', style({ transform: 'translateX(100%)' }))
                            ]),
                            transition('void => slideLeft', [
                                style({ transform: 'translateX(-100%)' }),
                                animate('500ms ease-in-out', style({ transform: 'translateX(0)' }))
                            ]),
                            transition('fade => void', [
                                animate('500ms ease-in-out', style({ opacity: '0' }))
                            ]),
                            transition('void => fade', [
                                style({ opacity: '0' }),
                                animate('500ms ease-in-out', style({ opacity: '1' }))
                            ]),
                            transition('rotateLeft => void', [
                                animate('500ms ease-in-out', style({ transform: 'scale(1, 1) rotate(-90deg)', opacity: '0' }))
                            ]),
                            transition('void => rotateLeft', [
                                style({ transform: 'scale(1, 1) rotate(-90deg)', opacity: '0' }),
                                animate('500ms ease-in-out', style({ transform: 'scale(1, 1) rotate(0deg)', opacity: '1' }))
                            ]),
                            transition('rotateRight => void', [
                                animate('500ms ease-in-out', style({ transform: 'scale(1, 1) rotate(90deg)', opacity: '0' }))
                            ]),
                            transition('void => rotateRight', [
                                style({ transform: 'scale(1, 1) rotate(90deg)', opacity: '0' }),
                                animate('500ms ease-in-out', style({ transform: 'scale(1, 1) rotate(0deg)', opacity: '1' }))
                            ]),
                            transition('zoom => void', [
                                animate('500ms ease-in-out', style({ transform: 'scale(2.5,2.5)', opacity: '0' }))
                            ]),
                            transition('void => zoom', [
                                style({ transform: 'scale(2.5,2.5)', opacity: '0' }),
                                animate('500ms ease-in-out', style({ transform: 'scale(1, 1)', opacity: '1' }))
                            ]),
                        ]),
                    ], template: "<div class=\"ngx-gallery-image-wrapper ngx-gallery-animation-{{animation}} ngx-gallery-image-size-{{size}}\">\n  <ng-container *ngFor=\"let image of getImages(); let i = index;\">\n\n    <div *ngIf=\"image.type === 'image' && image.index === _selectedIndex\" class=\"ngx-gallery-image\"\n         [ngClass]=\"{'ngx-gallery-clickable': clickable }\"\n         [style.background-image]=\"getSafeUrl(image.src)\"\n         (click)=\"handleClick($event, image.index)\"\n         [@animation]=\"action\"\n         (@animation.start)=\"onStart($event)\"\n         (@animation.done)=\"onDone($event)\">\n      <div class=\"ngx-gallery-icons-wrapper\">\n        <ngx-gallery-action *ngFor=\"let action of actions\" [icon]=\"action.icon\" [disabled]=\"action.disabled\"\n                            [titleText]=\"action.titleText\"\n                            (closeClick)=\"action.onClick($event, image.index)\"></ngx-gallery-action>\n      </div>\n      <div class=\"ngx-gallery-image-text\" *ngIf=\"showDescription && descriptions[image.index]\"\n          [innerHTML]=\"descriptions[image.index]\" (click)=\"$event.stopPropagation()\"></div>\n    </div>\n\n    <div *ngIf=\"image.type === 'video' && image.index === _selectedIndex\" class=\"ngx-gallery-image\"\n         [ngClass]=\"{'ngx-gallery-clickable': clickable }\"\n         [style.background-image]=\"getSafeUrl(image.src)\"\n         (click)=\"handleClick($event, image.index)\"\n         [@animation]=\"action\"\n         (@animation.start)=\"onStart($event)\"\n         (@animation.done)=\"onDone($event)\">\n      <video controls style=\"width:100%; height:100%; background: #000;\">\n        <source [src]=\"image.src\">\n          Your browser does not support the video tag.\n      </video>\n      <div class=\"ngx-gallery-icons-wrapper\">\n      <ngx-gallery-action *ngFor=\"let action of actions\" [icon]=\"action.icon\" [disabled]=\"action.disabled\"\n                          [titleText]=\"action.titleText\"\n                          (closeClick)=\"action.onClick($event, image.index)\"></ngx-gallery-action>\n      </div>\n      <div class=\"ngx-gallery-image-text\" *ngIf=\"showDescription && descriptions[image.index]\"\n          [innerHTML]=\"descriptions[image.index]\" (click)=\"$event.stopPropagation()\"></div>\n      </div>\n\n\n  </ng-container>\n  <ngx-gallery-bullets *ngIf=\"bullets\" [count]=\"images.length\" [active]=\"_selectedIndex\"\n                       (bulletChange)=\"show($event)\"></ngx-gallery-bullets>\n  <ngx-gallery-arrows class=\"ngx-gallery-image-size-{{size}}\" *ngIf=\"arrows\" (prevClick)=\"showPrev()\"\n                      (nextClick)=\"showNext()\" [prevDisabled]=\"!canShowPrev()\" [nextDisabled]=\"!canShowNext()\"\n                      [arrowPrevIcon]=\"arrowPrevIcon\" [arrowNextIcon]=\"arrowNextIcon\"></ngx-gallery-arrows>\n</div>\n", styles: [":host{width:100%;display:inline-block;position:relative;font-size:25px}.ngx-gallery-image-wrapper{width:100%;height:100%;position:absolute;left:0;top:0;overflow:hidden}.ngx-gallery-image{background-position:center;background-repeat:no-repeat;height:100%;width:100%;position:absolute;top:0}.ngx-gallery-image-size-cover .ngx-gallery-image{background-size:cover}.ngx-gallery-image-size-contain .ngx-gallery-image{background-size:contain}.ngx-gallery-animation-fade .ngx-gallery-image{left:0;opacity:1;transition:.5s ease-in-out}.ngx-gallery-animation-fade .ngx-gallery-image.ngx-gallery-active{opacity:1}.ngx-gallery-animation-rotate .ngx-gallery-image{transition:1s ease;transform:scale(1) rotate(0);left:0;opacity:1}.ngx-gallery-animation-zoom .ngx-gallery-image{transition:1s ease;transform:scale(1);left:0;opacity:1}.ngx-gallery-image-text{width:100%;background:rgba(0,0,0,.7);padding:10px;text-align:center;color:#fff;font-size:16px;position:absolute;bottom:0;z-index:10}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i2.NgxGalleryService }]; }, propDecorators: { images: [{
                type: Input
            }], clickable: [{
                type: Input
            }], selectedIndex: [{
                type: Input
            }], arrows: [{
                type: Input
            }], arrowsAutoHide: [{
                type: Input
            }], swipe: [{
                type: Input
            }], animation: [{
                type: Input
            }], size: [{
                type: Input
            }], arrowPrevIcon: [{
                type: Input
            }], arrowNextIcon: [{
                type: Input
            }], autoPlay: [{
                type: Input
            }], autoPlayInterval: [{
                type: Input
            }], autoPlayPauseOnHover: [{
                type: Input
            }], infinityMove: [{
                type: Input
            }], lazyLoading: [{
                type: Input
            }], actions: [{
                type: Input
            }], descriptions: [{
                type: Input
            }], showDescription: [{
                type: Input
            }], bullets: [{
                type: Input
            }], imageClick: [{
                type: Output
            }], activeChange: [{
                type: Output
            }], animating: [{
                type: Output
            }], onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }] } });
//# sourceMappingURL=data:application/json;base64,