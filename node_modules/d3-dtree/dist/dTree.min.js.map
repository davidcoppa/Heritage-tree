{"version":3,"sources":["dTree.min.js","/source/dTree.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","define","amd","dTree","this","TreeBuilder","root","siblings","opts","DEBUG_LEVEL","debug","allNodes","_flatten","visibleNodes","_","filter","n","hidden","nodeSize","callbacks","nodeWidth","textRenderer","value","width","margin","left","right","height","top","bottom","zoom","d3","behavior","scaleExtent","on","bind","svg","attr","event","translate","scale","select","append","call","tree","layout","separation","a","b","_update","source","nodes","links","selectAll","data","enter","styles","linage","_elbow","_linkSiblings","marriage","_siblingLine","d","x","cWidth","y","cHeight","id","html","nodeRenderer","name","extra","textClass","nodeClick","recurse","node","children","forEach","push","noParent","ny","linedata","fun","line","interpolate","start","v","end","nodeHeight","number","maxHeight","tmpSvg","document","createElement","body","appendChild","map","container","setAttribute","style","visibility","maxWidth","text","innerHTML","offsetHeight","removeChild","Math","max","nodeClass","msg","console","log","VERSION","init","options","arguments","undefined","defaultsDeep","_nodeRenderer","_nodeSize","nodeSorter","aName","aExtra","bName","bExtra","_textRenderer","_preprocess","treeBuilder","create","reconstructTree","person","parent","class","depthOffset","pushNode","_sortPersons","child","marriages","_sortMarriages","index","m","sp","spouse","persons","sort","Array","isArray","marriageA","marriageB"],"mappings":"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","file":"dTree.min.js","sourcesContent":["var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.dTree = factory();\n})(this, function () {\n  'use strict';\n\n  var TreeBuilder = (function () {\n    function TreeBuilder(root, siblings, opts) {\n      _classCallCheck(this, TreeBuilder);\n\n      TreeBuilder.DEBUG_LEVEL = opts.debug ? 1 : 0;\n\n      this.root = root;\n      this.siblings = siblings;\n      this.opts = opts;\n\n      // flatten nodes\n      this.allNodes = this._flatten(this.root);\n\n      // Calculate node size\n      var visibleNodes = _.filter(this.allNodes, function (n) {\n        return !n.hidden;\n      });\n      this.nodeSize = opts.callbacks.nodeSize(visibleNodes, opts.nodeWidth, opts.callbacks.textRenderer);\n    }\n\n    _createClass(TreeBuilder, [{\n      key: 'create',\n      value: function create() {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var width = opts.width + opts.margin.left + opts.margin.right;\n        var height = opts.height + opts.margin.top + opts.margin.bottom;\n\n        var zoom = d3.behavior.zoom().scaleExtent([0.1, 10]).on('zoom', _.bind(function () {\n          svg.attr('transform', 'translate(' + d3.event.translate + ')' + ' scale(' + d3.event.scale + ')');\n        }, this));\n\n        //make an SVG\n        var svg = this.svg = d3.select(opts.target).append('svg').attr('width', width).attr('height', height).call(zoom).append('g').attr('transform', 'translate(' + width / 2 + ',' + opts.margin.top + ')');\n\n        zoom.translate([width / 2, opts.margin.top]);\n\n        // Compute the layout.\n        this.tree = d3.layout.tree().nodeSize([nodeSize[0] * 2, nodeSize[1] * 2.5]);\n\n        this.tree.separation(function separation(a, b) {\n          if (a.hidden || b.hidden) {\n            return 0.3;\n          } else {\n            return 0.6;\n          }\n        });\n\n        this._update(this.root);\n      }\n    }, {\n      key: '_update',\n      value: function _update(source) {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var nodes = this.tree.nodes(source);\n\n        var links = this.tree.links(nodes);\n\n        // Create the link lines.\n        this.svg.selectAll('.link').data(links).enter().append('path').attr('class', opts.styles.linage).attr('d', this._elbow);\n\n        var nodes = this.svg.selectAll('.node').data(nodes).enter();\n\n        this._linkSiblings();\n\n        // Draw siblings (marriage)\n        this.svg.selectAll('.sibling').data(this.siblings).enter().append('path').attr('class', opts.styles.marriage).attr('d', _.bind(this._siblingLine, this));\n\n        // Create the node rectangles.\n        nodes.append('foreignObject').filter(function (d) {\n          return d.hidden ? false : true;\n        }).attr('x', function (d) {\n          return d.x - d.cWidth / 2 + 'px';\n        }).attr('y', function (d) {\n          return d.y - d.cHeight / 2 + 'px';\n        }).attr('width', function (d) {\n          return d.cWidth + 'px';\n        }).attr('height', function (d) {\n          return d.cHeight + 'px';\n        }).attr('id', function (d) {\n          return d.id;\n        }).html(function (d) {\n          return opts.callbacks.nodeRenderer(d.name, d.x, d.y, nodeSize[0], nodeSize[1], d.extra, d.id, d['class'], d.textClass, opts.callbacks.textRenderer);\n        }).on('click', function (d) {\n          if (d.hidden) {\n            return;\n          }\n          opts.callbacks.nodeClick(d.name, d.extra, d.id);\n        });\n      }\n    }, {\n      key: '_flatten',\n      value: function _flatten(root) {\n        var n = [];\n        var i = 0;\n\n        function recurse(node) {\n          if (node.children) {\n            node.children.forEach(recurse);\n          }\n          if (!node.id) {\n            node.id = ++i;\n          }\n          n.push(node);\n        }\n        recurse(root);\n        return n;\n      }\n    }, {\n      key: '_elbow',\n      value: function _elbow(d, i) {\n        if (d.target.noParent) {\n          return 'M0,0L0,0';\n        }\n        var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n        var linedata = [{\n          x: d.target.x,\n          y: d.target.y\n        }, {\n          x: d.target.x,\n          y: ny\n        }, {\n          x: d.source.x,\n          y: d.source.y\n        }];\n\n        var fun = d3.svg.line().x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        }).interpolate('step-after');\n        return fun(linedata);\n      }\n    }, {\n      key: '_linkSiblings',\n      value: function _linkSiblings() {\n\n        var allNodes = this.allNodes;\n\n        _.forEach(this.siblings, function (d) {\n          var start = allNodes.filter(function (v) {\n            return d.source.id == v.id;\n          });\n          var end = allNodes.filter(function (v) {\n            return d.target.id == v.id;\n          });\n          d.source.x = start[0].x;\n          d.source.y = start[0].y;\n          d.target.x = end[0].x;\n          d.target.y = end[0].y;\n        });\n      }\n    }, {\n      key: '_siblingLine',\n      value: function _siblingLine(d, i) {\n\n        var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n        var nodeWidth = this.nodeSize[0];\n        var nodeHeight = this.nodeSize[1];\n\n        // Not first marriage\n        if (d.number > 0) {\n          ny -= nodeHeight * 8 / 10;\n        }\n\n        var linedata = [{\n          x: d.source.x,\n          y: d.source.y\n        }, {\n          x: d.source.x + nodeWidth * 6 / 10,\n          y: d.source.y\n        }, {\n          x: d.source.x + nodeWidth * 6 / 10,\n          y: ny\n        }, {\n          x: d.target.x - nodeWidth * 6 / 10,\n          y: ny\n        }, {\n          x: d.target.x - nodeWidth * 6 / 10,\n          y: d.target.y\n        }, {\n          x: d.target.x,\n          y: d.target.y\n        }];\n\n        var fun = d3.svg.line().x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        }).interpolate('linear');\n        return fun(linedata);\n      }\n    }], [{\n      key: '_nodeSize',\n      value: function _nodeSize(nodes, width, textRenderer) {\n        var maxWidth = 0;\n        var maxHeight = 0;\n        var tmpSvg = document.createElement('svg');\n        document.body.appendChild(tmpSvg);\n\n        _.map(nodes, function (n) {\n          var container = document.createElement('div');\n          container.setAttribute('class', n['class']);\n          container.style.visibility = 'hidden';\n          container.style.maxWidth = width + 'px';\n\n          var text = textRenderer(n.name, n.extra, n.textClass);\n          container.innerHTML = text;\n\n          tmpSvg.appendChild(container);\n          var height = container.offsetHeight;\n          tmpSvg.removeChild(container);\n\n          maxHeight = Math.max(maxHeight, height);\n          n.cHeight = height;\n          n.cWidth = width;\n        });\n        document.body.removeChild(tmpSvg);\n\n        return [width, maxHeight];\n      }\n    }, {\n      key: '_nodeRenderer',\n      value: function _nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n        var node = '';\n        node += '<div ';\n        node += 'style=\"height:100%;width:100%;\" ';\n        node += 'class=\"' + nodeClass + '\" ';\n        node += 'id=\"node' + id + '\">\\n';\n        node += textRenderer(name, extra, textClass);\n        node += '</div>';\n        return node;\n      }\n    }, {\n      key: '_textRenderer',\n      value: function _textRenderer(name, extra, textClass) {\n        var node = '';\n        node += '<p ';\n        node += 'align=\"center\" ';\n        node += 'class=\"' + textClass + '\">\\n';\n        node += name;\n        node += '</p>\\n';\n        return node;\n      }\n    }, {\n      key: '_debug',\n      value: function _debug(msg) {\n        if (TreeBuilder.DEBUG_LEVEL > 0) {\n          console.log(msg);\n        }\n      }\n    }]);\n\n    return TreeBuilder;\n  })();\n\n  var dTree = {\n\n    VERSION: '1.3.2',\n\n    init: function init(data) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var opts = _.defaultsDeep(options || {}, {\n        target: '#graph',\n        debug: false,\n        width: 600,\n        height: 600,\n        callbacks: {\n          nodeClick: function nodeClick(name, extra, id) {},\n          nodeRenderer: function nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n            return TreeBuilder._nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer);\n          },\n          nodeSize: function nodeSize(nodes, width, textRenderer) {\n            return TreeBuilder._nodeSize(nodes, width, textRenderer);\n          },\n          nodeSorter: function nodeSorter(aName, aExtra, bName, bExtra) {\n            return 0;\n          },\n          textRenderer: function textRenderer(name, extra, textClass) {\n            return TreeBuilder._textRenderer(name, extra, textClass);\n          }\n        },\n        margin: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        },\n        nodeWidth: 100,\n        styles: {\n          node: 'node',\n          linage: 'linage',\n          marriage: 'marriage',\n          text: 'nodeText'\n        }\n      });\n\n      var data = this._preprocess(data, opts);\n      var treeBuilder = new TreeBuilder(data.root, data.siblings, opts);\n      treeBuilder.create();\n    },\n\n    _preprocess: function _preprocess(data, opts) {\n\n      var siblings = [];\n      var id = 0;\n\n      var root = {\n        name: '',\n        id: id++,\n        hidden: true,\n        children: []\n      };\n\n      var reconstructTree = function reconstructTree(person, parent) {\n\n        // convert to person to d3 node\n        var node = {\n          name: person.name,\n          id: id++,\n          hidden: false,\n          children: [],\n          extra: person.extra,\n          textClass: person.textClass ? person.textClass : opts.styles.text,\n          'class': person['class'] ? person['class'] : opts.styles.node\n        };\n\n        // hide linages to the hidden root node\n        if (parent == root) {\n          node.noParent = true;\n        }\n\n        // apply depth offset\n        for (var i = 0; i < person.depthOffset; i++) {\n          var pushNode = {\n            name: '',\n            id: id++,\n            hidden: true,\n            children: [],\n            noParent: node.noParent\n          };\n          parent.children.push(pushNode);\n          parent = pushNode;\n        }\n\n        // sort children\n        dTree._sortPersons(person.children, opts);\n\n        // add \"direct\" children\n        _.forEach(person.children, function (child) {\n          reconstructTree(child, node);\n        });\n\n        parent.children.push(node);\n\n        // DEPRECATED: Backwards-compatability for v1.x syntax, remove for 2.0\n        if (person.marriage) {\n          console.log('DEPRECATED: The data attribute \"marriage\" is deprecated in favor of \"marriages\" that takes an array. It will be removed in 2.0.');\n          person.marriages = [person.marriage];\n        }\n\n        //sort marriages\n        dTree._sortMarriages(person.marriages, opts);\n\n        // go through marriage\n        _.forEach(person.marriages, function (marriage, index) {\n\n          var m = {\n            name: '',\n            id: id++,\n            hidden: true,\n            noParent: true,\n            children: [],\n            extra: marriage.extra\n          };\n\n          var sp = marriage.spouse;\n\n          var spouse = {\n            name: sp.name,\n            id: id++,\n            hidden: false,\n            noParent: true,\n            children: [],\n            textClass: sp.textClass ? sp.textClass : opts.styles.text,\n            'class': sp['class'] ? sp['class'] : opts.styles.node,\n            extra: sp.extra\n          };\n\n          parent.children.push(m, spouse);\n\n          dTree._sortPersons(marriage.children, opts);\n          _.forEach(marriage.children, function (child) {\n            reconstructTree(child, m);\n          });\n\n          siblings.push({\n            source: {\n              id: node.id\n            },\n            target: {\n              id: spouse.id\n            },\n            number: index\n          });\n        });\n      };\n\n      _.forEach(data, function (person) {\n        reconstructTree(person, root);\n      });\n\n      return {\n        root: root,\n        siblings: siblings\n      };\n    },\n\n    _sortPersons: function _sortPersons(persons, opts) {\n      if (persons != undefined) {\n        persons.sort(function (a, b) {\n          return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n        });\n      }\n      return persons;\n    },\n\n    _sortMarriages: function _sortMarriages(marriages, opts) {\n      if (marriages != undefined && Array.isArray(marriages)) {\n        marriages.sort(function (marriageA, marriageB) {\n          var a = marriageA.spouse;\n          var b = marriageB.spouse;\n          return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n        });\n      }\n      return marriages;\n    }\n\n  };\n\n  return dTree;\n});\n//# sourceMappingURL=dTree.js.map\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.dTree = factory();\n}(this, function () { 'use strict';\n\n  class TreeBuilder {\n\n    constructor(root, siblings, opts) {\n      TreeBuilder.DEBUG_LEVEL = opts.debug ? 1 : 0;\n\n      this.root = root;\n      this.siblings = siblings;\n      this.opts = opts;\n\n      // flatten nodes\n      this.allNodes = this._flatten(this.root);\n\n      // Calculate node size\n      var visibleNodes = _.filter(this.allNodes, function(n) {\n        return !n.hidden;\n      });\n      this.nodeSize = opts.callbacks.nodeSize(visibleNodes,\n        opts.nodeWidth, opts.callbacks.textRenderer);\n    }\n\n    create() {\n\n      var opts = this.opts;\n      var allNodes = this.allNodes;\n      var nodeSize = this.nodeSize;\n\n      var width = opts.width + opts.margin.left + opts.margin.right;\n      var height = opts.height + opts.margin.top + opts.margin.bottom;\n\n      var zoom = d3.behavior.zoom()\n        .scaleExtent([0.1, 10])\n        .on('zoom', _.bind(function() {\n          svg.attr('transform', 'translate(' + d3.event.translate + ')' +\n            ' scale(' + d3.event.scale + ')');\n        }, this));\n\n      //make an SVG\n      var svg = this.svg = d3.select(opts.target)\n        .append('svg')\n        .attr('width', width)\n        .attr('height', height)\n        .call(zoom)\n        .append('g')\n        .attr('transform', 'translate(' + width / 2 + ',' + opts.margin.top + ')');\n\n      zoom.translate([width / 2, opts.margin.top]);\n\n      // Compute the layout.\n      this.tree = d3.layout.tree()\n        .nodeSize([nodeSize[0] * 2, nodeSize[1] * 2.5]);\n\n      this.tree.separation(function separation(a, b) {\n        if (a.hidden || b.hidden) {\n          return 0.3;\n        } else {\n          return 0.6;\n        }\n      });\n\n      this._update(this.root);\n\n    }\n\n    _update(source) {\n\n      var opts = this.opts;\n      var allNodes = this.allNodes;\n      var nodeSize = this.nodeSize;\n\n      var nodes = this.tree.nodes(source);\n\n      var links = this.tree.links(nodes);\n\n      // Create the link lines.\n      this.svg.selectAll('.link')\n        .data(links)\n        .enter()\n        .append('path')\n        .attr('class', opts.styles.linage)\n        .attr('d', this._elbow);\n\n      var nodes = this.svg.selectAll('.node')\n        .data(nodes)\n        .enter();\n\n      this._linkSiblings();\n\n      // Draw siblings (marriage)\n      this.svg.selectAll('.sibling')\n        .data(this.siblings)\n        .enter()\n        .append('path')\n        .attr('class', opts.styles.marriage)\n        .attr('d', _.bind(this._siblingLine, this));\n\n      // Create the node rectangles.\n      nodes.append('foreignObject')\n        .filter(function(d) {\n          return d.hidden ? false : true;\n        })\n        .attr('x', function(d) {\n          return d.x - d.cWidth / 2 + 'px';\n        })\n        .attr('y', function(d) {\n          return d.y - d.cHeight / 2 + 'px';\n        })\n        .attr('width', function(d) {\n          return d.cWidth + 'px';\n        })\n        .attr('height', function(d) {\n          return d.cHeight + 'px';\n        })\n        .attr('id', function(d) {\n          return d.id;\n        })\n        .html(function(d) {\n          return opts.callbacks.nodeRenderer(\n            d.name,\n            d.x,\n            d.y,\n            nodeSize[0],\n            nodeSize[1],\n            d.extra,\n            d.id,\n            d.class,\n            d.textClass,\n            opts.callbacks.textRenderer);\n        })\n        .on('click', function(d)  {\n          if (d.hidden) {\n            return;\n          }\n          opts.callbacks.nodeClick(d.name, d.extra, d.id);\n        });\n    }\n\n    _flatten(root) {\n      var n = [];\n      var i = 0;\n\n      function recurse(node) {\n        if (node.children) {\n          node.children.forEach(recurse);\n        }\n        if (!node.id) {\n          node.id = ++i;\n        }\n        n.push(node);\n      }\n      recurse(root);\n      return n;\n    }\n\n    _elbow(d, i) {\n      if (d.target.noParent) {\n        return 'M0,0L0,0';\n      }\n      var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n      var linedata = [{\n        x: d.target.x,\n        y: d.target.y\n      }, {\n        x: d.target.x,\n        y: ny\n      }, {\n        x: d.source.x,\n        y: d.source.y\n      }];\n\n      var fun = d3.svg.line()\n        .x(function(d) {\n          return d.x;\n        })\n        .y(function(d) {\n          return d.y;\n        })\n        .interpolate('step-after');\n      return fun(linedata);\n    }\n\n    _linkSiblings() {\n\n      var allNodes = this.allNodes;\n\n      _.forEach(this.siblings, function(d)  {\n        var start = allNodes.filter(function(v) {\n          return d.source.id == v.id;\n        });\n        var end = allNodes.filter(function(v) {\n          return d.target.id == v.id;\n        });\n        d.source.x = start[0].x;\n        d.source.y = start[0].y;\n        d.target.x = end[0].x;\n        d.target.y = end[0].y;\n      });\n\n    }\n\n    _siblingLine(d, i) {\n\n      var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n      var nodeWidth = this.nodeSize[0];\n      var nodeHeight = this.nodeSize[1];\n\n      // Not first marriage\n      if (d.number > 0) {\n        ny -= nodeHeight * 8 / 10;\n      }\n\n      var linedata = [{\n        x: d.source.x,\n        y: d.source.y\n      }, {\n        x: d.source.x + nodeWidth * 6 / 10,\n        y: d.source.y\n      }, {\n        x: d.source.x + nodeWidth * 6 / 10,\n        y: ny\n      }, {\n        x: d.target.x - nodeWidth * 6 / 10,\n        y: ny\n      }, {\n        x: d.target.x - nodeWidth * 6 / 10,\n        y: d.target.y\n      }, {\n        x: d.target.x,\n        y: d.target.y\n      }];\n\n      var fun = d3.svg.line()\n        .x(function(d) {\n          return d.x;\n        })\n        .y(function(d) {\n          return d.y;\n        })\n        .interpolate('linear');\n      return fun(linedata);\n    }\n\n    static _nodeSize(nodes, width, textRenderer) {\n      var maxWidth = 0;\n      var maxHeight = 0;\n      var tmpSvg = document.createElement('svg');\n      document.body.appendChild(tmpSvg);\n\n      _.map(nodes, function(n) {\n        var container = document.createElement('div');\n        container.setAttribute('class', n.class);\n        container.style.visibility = 'hidden';\n        container.style.maxWidth = width + 'px';\n\n        var text = textRenderer(n.name, n.extra, n.textClass);\n        container.innerHTML = text;\n\n        tmpSvg.appendChild(container);\n        var height = container.offsetHeight;\n        tmpSvg.removeChild(container);\n\n        maxHeight = Math.max(maxHeight, height);\n        n.cHeight = height;\n        n.cWidth = width;\n      });\n      document.body.removeChild(tmpSvg);\n\n      return [width, maxHeight];\n    }\n\n    static _nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n      var node = '';\n      node += '<div ';\n      node += 'style=\"height:100%;width:100%;\" ';\n      node += 'class=\"' + nodeClass + '\" ';\n      node += 'id=\"node' + id + '\">\\n';\n      node += textRenderer(name, extra, textClass);\n      node += '</div>';\n      return node;\n    }\n\n    static _textRenderer(name, extra, textClass) {\n      var node = '';\n      node += '<p ';\n      node += 'align=\"center\" ';\n      node += 'class=\"' + textClass + '\">\\n';\n      node += name;\n      node += '</p>\\n';\n      return node;\n    }\n\n    static _debug(msg) {\n      if (TreeBuilder.DEBUG_LEVEL > 0)  {\n        console.log(msg);\n      }\n    }\n\n  }\n\n  const dTree = {\n\n    VERSION: '1.3.2',\n\n    init: function(data, options = {}) {\n\n      var opts = _.defaultsDeep(options || {}, {\n        target: '#graph',\n        debug: false,\n        width: 600,\n        height: 600,\n        callbacks: {\n          nodeClick: function(name, extra, id) {},\n          nodeRenderer: function(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n            return TreeBuilder._nodeRenderer(name, x, y, height, width, extra,\n              id,nodeClass, textClass, textRenderer);\n          },\n          nodeSize: function(nodes, width, textRenderer) {\n            return TreeBuilder._nodeSize(nodes, width, textRenderer);\n          },\n          nodeSorter: function(aName, aExtra, bName, bExtra) {return 0;},\n          textRenderer: function(name, extra, textClass) {\n            return TreeBuilder._textRenderer(name, extra, textClass);\n          },\n        },\n        margin: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        },\n        nodeWidth: 100,\n        styles: {\n          node: 'node',\n          linage: 'linage',\n          marriage: 'marriage',\n          text: 'nodeText'\n        }\n      });\n\n      var data = this._preprocess(data, opts);\n      var treeBuilder = new TreeBuilder(data.root, data.siblings, opts);\n      treeBuilder.create();\n\n    },\n\n    _preprocess: function(data, opts) {\n\n      var siblings = [];\n      var id = 0;\n\n      var root = {\n        name: '',\n        id: id++,\n        hidden: true,\n        children: []\n      };\n\n      var reconstructTree = function(person, parent) {\n\n        // convert to person to d3 node\n        var node = {\n          name: person.name,\n          id: id++,\n          hidden: false,\n          children: [],\n          extra: person.extra,\n          textClass: person.textClass ? person.textClass : opts.styles.text,\n          class: person.class ? person.class : opts.styles.node\n        };\n\n        // hide linages to the hidden root node\n        if (parent == root) {\n          node.noParent = true;\n        }\n\n        // apply depth offset\n        for (var i = 0; i < person.depthOffset; i++) {\n          var pushNode = {\n            name: '',\n            id: id++,\n            hidden: true,\n            children: [],\n            noParent: node.noParent\n          };\n          parent.children.push(pushNode);\n          parent = pushNode;\n        }\n\n        // sort children\n        dTree._sortPersons(person.children, opts);\n\n        // add \"direct\" children\n        _.forEach(person.children, function(child) {\n          reconstructTree(child, node);\n        });\n\n        parent.children.push(node);\n\n        // DEPRECATED: Backwards-compatability for v1.x syntax, remove for 2.0\n        if (person.marriage) {\n          console.log('DEPRECATED: The data attribute \"marriage\" is deprecated in favor of \"marriages\" that takes an array. It will be removed in 2.0.');\n          person.marriages = [person.marriage];\n        }\n\n        //sort marriages\n        dTree._sortMarriages(person.marriages, opts);\n\n        // go through marriage\n        _.forEach(person.marriages, function(marriage, index) {\n\n          var m = {\n            name: '',\n            id: id++,\n            hidden: true,\n            noParent: true,\n            children: [],\n            extra: marriage.extra\n          };\n\n          var sp = marriage.spouse;\n\n          var spouse = {\n            name: sp.name,\n            id: id++,\n            hidden: false,\n            noParent: true,\n            children: [],\n            textClass: sp.textClass ? sp.textClass : opts.styles.text,\n            class: sp.class ? sp.class : opts.styles.node,\n            extra: sp.extra\n          };\n\n          parent.children.push(m, spouse);\n\n          dTree._sortPersons(marriage.children, opts);\n          _.forEach(marriage.children, function(child) {\n            reconstructTree(child, m);\n          });\n\n          siblings.push({\n            source: {\n              id: node.id\n            },\n            target: {\n              id: spouse.id\n            },\n            number: index\n          });\n        });\n\n      };\n\n      _.forEach(data, function(person) {\n        reconstructTree(person, root);\n      });\n\n      return {\n        root: root,\n        siblings: siblings\n      };\n\n    },\n\n    _sortPersons: function(persons, opts) {\n      if (persons != undefined) {\n        persons.sort(function(a, b) {\n          return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n        });\n      }\n      return persons;\n    },\n\n    _sortMarriages: function(marriages, opts) {\n      if (marriages != undefined && Array.isArray(marriages)) {\n        marriages.sort(function(marriageA, marriageB) {\n          var a = marriageA.spouse;\n          var b = marriageB.spouse;\n          return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n        });\n      }\n      return marriages;\n    }\n\n  };\n\n  return dTree;\n\n}));"],"sourceRoot":"/source/"}